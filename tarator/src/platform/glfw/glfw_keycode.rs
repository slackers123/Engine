use egui_glfw_gl::glfw::{Key, Key::*, MouseButton, MouseButton::*};
use crate::tarator::keycode::*;
/// ## get_tr_mousekeycode
/// gets the glfw mousekeycode
pub fn get_tr_mousekeycode(mouse_key: MouseButton) -> u32 {
    return match mouse_key {
        Button1=>TR_LBUTTON,
        Button2=>TR_RBUTTON,
        Button3=>TR_MBUTTON,
        Button4=>TR_XBUTTON1,
        Button5=>TR_XBUTTON2,
        Button6=>0,                 // NOT YET DEFINED [TODO]
        Button7=>0,                 // NOT YET DEFINED [TODO]
        Button8=>0                  // NOT YET DEFINED [TODO]
    };
}
/// ## get_tr_keycode
/// gets the glfw keycode 
pub fn get_tr_keycode(key: Key) -> u32 {
    return match key {
        Space=>TR_SPACE,
        Apostrophe=>TR_OEM_7,
        Comma=>TR_OEM_COMMA,
        Minus=>TR_OEM_MINUS,
        Period=>TR_OEM_PERIOD,
        Slash=>TR_OEM_2,
        Num0=>TR_NUMPAD0,
        Num1=>TR_NUMPAD1,
        Num2=>TR_NUMPAD2,
        Num3=>TR_NUMPAD3,
        Num4=>TR_NUMPAD4,
        Num5=>TR_NUMPAD5,
        Num6=>TR_NUMPAD6,
        Num7=>TR_NUMPAD7,
        Num8=>TR_NUMPAD8,
        Num9=>TR_NUMPAD9,
        Semicolon=>TR_OEM_1,
        Equal=>TR_OEM_NEC_EQUAL,
        A=>TR_A,
        B=>TR_B,
        C=>TR_C,
        D=>TR_D,
        E=>TR_E,
        F=>TR_F,
        G=>TR_G,
        H=>TR_H,
        I=>TR_I,
        J=>TR_J,
        K=>TR_K,
        L=>TR_L,
        M=>TR_M,
        N=>TR_N,
        O=>TR_O,
        P=>TR_P,
        Q=>TR_Q,
        R=>TR_R,
        S=>TR_S,
        T=>TR_T,
        U=>TR_U,
        V=>TR_V,
        W=>TR_W,
        X=>TR_X,
        Y=>TR_Y,
        Z=>TR_Z,
        LeftBracket=>TR_OEM_4,
        Backslash=>TR_OEM_5,
        RightBracket=>TR_OEM_6,
        GraveAccent=>TR_OEM_7,
        World1=>0,                  // NOT YET DEFINED [TODO]
        World2=>0,                  // NOT YET DEFINED [TODO]
        Escape=>TR_ESCAPE,
        Enter=>TR_RETURN,
        Tab=>TR_TAB,
        Backspace=>TR_BACK,
        Insert=>TR_INSERT,
        Delete=>TR_DELETE,
        Right=>TR_RIGHT,
        Left=>TR_LEFT,
        Down=>TR_DOWN,
        Up=>TR_UP,
        PageUp=>TR_NAVIGGATION_UP,
        PageDown=>TR_NAVIGGATION_DOWN,
        Home=>TR_HOME,
        End=>TR_END,
        CapsLock=>0,                // NOT YET DEFINED [TODO]
        ScrollLock=>TR_SCOLL,
        NumLock=>TR_NUMLOCK,
        PrintScreen=>TR_PRINT,
        Pause=>TR_PAUSE,
        F1=>TR_F1,
        F2=>TR_F2,
        F3=>TR_F3,
        F4=>TR_F4,
        F5=>TR_F5,
        F6=>TR_F6,
        F7=>TR_F7,
        F8=>TR_F8,
        F9=>TR_F9,
        F10=>TR_F10,
        F11=>TR_F11,
        F12=>TR_F12,
        F13=>TR_F13,
        F14=>TR_F14,
        F15=>TR_F15,
        F16=>TR_F16,
        F17=>TR_F17,
        F18=>TR_F18,
        F19=>TR_F19,
        F20=>TR_F20,
        F21=>TR_F21,
        F22=>TR_F22,
        F23=>TR_F23,
        F24=>TR_F24,
        F25=>0,                     // NOT YET DEFINED [TODO]
        Kp0=>TR_0,
        Kp1=>TR_1,
        Kp2=>TR_2,
        Kp3=>TR_3,
        Kp4=>TR_4,
        Kp5=>TR_5,
        Kp6=>TR_6,
        Kp7=>TR_7,
        Kp8=>TR_8,
        Kp9=>TR_9,
        KpDecimal=>TR_DECIAML,
        KpDivide=>TR_DIVIDE,
        KpMultiply=>TR_MULTIPLY,
        KpSubtract=>TR_SUBTRACT,
        KpAdd=>TR_ADD,
        KpEnter=>0,                 // NOT YET DEFINED [TODO]
        KpEqual=>TR_OEM_NEC_EQUAL,
        LeftShift=>TR_LSHIFT,
        LeftControl=>TR_LCONTROL,
        LeftAlt=>TR_LMENU,
        LeftSuper=>TR_LWIN,
        RightShift=>TR_RSHIFT,
        RightControl=>TR_RCONTROL,
        RightAlt=>TR_RMENU,
        RightSuper=>TR_RWIN,
        Menu=>TR_MENU,
        Unknown=>0                  // NOT YET DEFINED [TODO]
    };
}
