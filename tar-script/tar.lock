{"main": FuncDef { ident: "main", args: None, ret_ty: None, block: [FuncCall { ident: "test", args: [Integer(1), Integer(1), Integer(0)] }] }, "test": FuncDef { ident: "test", args: Some([Arg { ident: "a", ty: "int" }, Arg { ident: "b", ty: "int" }, Arg { ident: "d", ty: "int" }]), ret_ty: None, block: [FuncCall { ident: "log", args: [Ident("a")] }, IfStmt { condition: BoolOp { op: LessThan, lhs: Ident("d"), rhs: Integer(10) }, block: [FuncCall { ident: "test", args: [Ident("b"), BinOp { op: Plus, lhs: Ident("a"), rhs: Ident("b") }, BinOp { op: Plus, lhs: Ident("d"), rhs: Integer(1) }] }], else_if_stmt: Some([]), else_stmt: None }] }}