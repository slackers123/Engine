WHITESPACE =    _{ " " | "\t" | "\n" | "\r"}
EOS = 			_{ ";" }

Program = 		_{ SOI ~ definitions? ~ functions ~ EOI }

definitions = 	  _{ (definition | import)+ }

definition =     { "#def" ~ ident ~ "=" ~ ident ~ EOS }
import = 	     { "#use" ~ ident ~ ("::" ~ident)* ~ EOS }

functions =      { funcDef+ }

funcDef = 		 { "fn" ~ ident ~ "(" ~ args? ~ ")" ~ ("->" ~ retTy)? ~ "{" ~ block ~ "}" }

retTy =       { Type }

block = {
	(
        decl
      | funcCall
      | valAssign
      | ifStmt
    )*
     ~ returnStmt?
}

ifStmt =    { "if" ~ "(" ~ condition ~ ")" ~ "{" ~ block ~ "}" ~
             ("else" ~ "if" ~ "(" ~ condition ~ ")" ~ "{" ~ block ~ "}")* ~
             ("else" ~ "{" ~ block ~ "}")? }

condition =  { bool | boolExpr | innerFuncCall }

boolExpr =     { Expr ~ boolOp ~ Expr }

returnStmt = 	 { "return" ~ Expr ~ EOS }

valAssign = 	 { ident ~ "=" ~ Expr ~ EOS }

decl = 	         { Type ~ ident ~ "=" ~ Expr ~ EOS }

funcCall = 		 { ident ~ "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" ~ EOS }
innerFuncCall = { ident ~ "(" ~ (Expr ~ ",")* ~ Expr? ~ ")" }

Expr =           { Sum | string }

Sum =            { Product ~ ((plus | minus) ~ Product)* }

Product =        { Value ~ ((mul | div) ~ Value)* }

Value =          _{ int | innerFuncCall | ident | "(" ~ Expr ~ ")" }

boolOp =        _{ equal | greaterThan | lessThan | greaterThanEqual | lessThanEqual }

unaryOperation =_{ plus | minus }
operation =     _{ plus | minus | div | mul }

plus =  { "+" }
minus = { "-" }
div =   { "/" }
mul =   { "*" }
equal = { "==" }
notEqual = { "!=" }
greaterThan = { ">" }
lessThan = { "<" }
greaterThanEqual = { ">=" }
lessThanEqual = { "<=" }

int = 			@{ ASCII_DIGIT+ }

string = 		@{ "\"" ~ ( (!"\"" ~ ANY) )* ~ "\"" }

bool =      @{"true" | "false"}

args = 			 { arg ~ ("," ~ arg)* }

arg = 			 { ident ~ ":" ~ Type }

ident = 		@{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "." )* }

Type = 			 { "int" | "string" }